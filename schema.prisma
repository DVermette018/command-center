datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ==================== AUDIT SYSTEM ====================
model AuditLog {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now())
  entityType String // "customer", "project", "business_profile", etc.
  entityId   String
  action     AuditAction
  changes    Json? // Store the changes as JSON
  userId     String? // Reference to the user who made the change
  ipAddress  String?
  userAgent  String?
  metadata   Json? // Additional context

  @@index([entityType, entityId])
  @@index([createdAt])
  @@map("audit_logs")
}

// ==================== USER MANAGEMENT ====================
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  role      UserRole
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  customerContacts   CustomerContact[]
  projectsManaged    Project[]           @relation("ProjectManager")
  projectTeamMembers ProjectTeamMember[]
  notes              Note[]

  @@map("users")
}

// ==================== CUSTOMER MANAGEMENT ====================
model Customer {
  id     String         @id @default(cuid())
  status CustomerStatus @default(LEAD)
  source String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  businessProfile BusinessProfile?
  contacts        CustomerContact[]
  projects        Project[]
  documents       Document[]
  notes           Note[]

  @@index([status])
  @@map("customers")
}

model CustomerContact {
  id         String   @id @default(cuid())
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  position   String?
  department String?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  isPrimary Boolean  @default(false)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([customerId, isPrimary])
  @@index([userId])
  @@map("customer_contacts")
}

// ==================== PROJECT MANAGEMENT ====================
model Project {
  id         String   @id @default(cuid())
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  name        String
  description String?       @db.LongText
  type        ProjectType
  status      ProjectStatus @default(DRAFT)
  phase       ProjectPhase  @default(DISCOVERY)
  priority    Priority      @default(MEDIUM)

  // Dates
  startDate     DateTime?
  targetEndDate DateTime?
  actualEndDate DateTime?

  // Assignment
  projectManagerId String?
  projectManager   User?   @relation("ProjectManager", fields: [projectManagerId], references: [id])

  // Metadata
  budget   Decimal? @db.Decimal(12, 2)
  currency String   @default("USD")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  teamMembers  ProjectTeamMember[]
  phases       ProjectPhaseHistory[]
  documents    Document[]
  notes        Note[]
  subscription Subscription[]

  setupProgress ProjectSetupProgress?
  projectAnswers ProjectAnswer[]

  @@index([customerId, status, phase, projectManagerId])
  @@map("projects")
}

model ProjectTeamMember {
  id        String  @id @default(cuid())
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  role     String // "Designer", "Developer", "Consultant", etc.
  joinedAt DateTime  @default(now())
  leftAt   DateTime?

  @@unique([projectId, userId])
  @@index([userId])
  @@map("project_team_members")
}

model ProjectPhaseHistory {
  id        String  @id @default(cuid())
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  phase       ProjectPhase
  status      PhaseStatus  @default(IN_PROGRESS)
  startedAt   DateTime     @default(now())
  completedAt DateTime?
  notes       String?      @db.LongText

  @@index([projectId, phase])
  @@map("project_phase_history")
}

// ==================== BUSINESS INFORMATION ====================
model BusinessProfile {
  id String @id @default(cuid())

  // Identity
  businessName String
  legalName    String?
  ownerName    String?
  taxId        String? // RFC, EIN, etc.
  phone        String?
  email        String?
  website      String?

  // Business Details
  category         String
  size             CompanySize?
  customCategory   String?
  description      String?      @db.LongText
  productsServices String?      @db.LongText
  yearEstablished  Int?

  // Branding
  slogan           String?
  missionStatement String? @db.LongText
  primaryColor     String?
  secondaryColor   String?
  accentColor     String?
  additionalColors  Json? // Array of hex colors stored as JSON

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  customerId  String?              @unique
  customer    Customer?            @relation(fields: [customerId], references: [id], onDelete: Cascade)
  addresses   Address[]
  schedules   BusinessSchedule[]
  socialMedia SocialMediaProfile[]

  @@index([customerId])
  @@map("business_profiles")
}

// ==================== ADDRESS MANAGEMENT ====================
model Address {
  id String @id @default(cuid())

  // Polymorphic relations
  businessProfileId String?
  businessProfile   BusinessProfile? @relation(fields: [businessProfileId], references: [id], onDelete: Cascade)

  type      AddressType @default(BUSINESS)
  isPrimary Boolean     @default(false)

  // Address fields
  street  String
  street2 String?
  city    String
  state   String
  zipCode String
  country String  @default("MX")

  // Additional info
  reference   String? // Landmarks, delivery instructions
  coordinates Json? // { lat: number, lng: number }

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([businessProfileId, isPrimary])
  @@map("addresses")
}

// ==================== SCHEDULE MANAGEMENT ====================
model BusinessSchedule {
  id                String          @id @default(cuid())
  businessProfileId String
  businessProfile   BusinessProfile @relation(fields: [businessProfileId], references: [id], onDelete: Cascade)

  dayOfWeek DayOfWeek
  openTime  String? // "09:00"
  closeTime String? // "17:00"
  isClosed  Boolean   @default(false)

  // For special hours
  breakStart String? // "13:00"
  breakEnd   String? // "14:00"

  @@unique([businessProfileId, dayOfWeek])
  @@map("business_schedules")
}

// ==================== SOCIAL MEDIA ====================
model SocialMediaProfile {
  id                String          @id @default(cuid())
  businessProfileId String
  businessProfile   BusinessProfile @relation(fields: [businessProfileId], references: [id], onDelete: Cascade)

  platform SocialPlatform
  url      String?
  username String?
  isActive Boolean        @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([businessProfileId, platform])
  @@map("social_media_profiles")
}

// ==================== DOCUMENTS & FILES ====================
model Document {
  id String @id @default(cuid())

  // Polymorphic relations
  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  type        DocumentType
  name        String
  description String?

  // File info
  fileUrl  String
  fileName String
  fileSize Int // in bytes
  mimeType String

  // Metadata
  version  Int     @default(1)
  isActive Boolean @default(true)

  uploadedBy String? // User ID
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([customerId])
  @@index([projectId])
  @@map("documents")
}

// ==================== NOTES & COMMUNICATION ====================
model Note {
  id String @id @default(cuid())

  // Polymorphic relations
  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  content String   @db.LongText
  type    NoteType @default(GENERAL)

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  isInternal Boolean @default(true) // Not visible to clients
  isPinned   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([customerId, projectId, authorId])
  @@map("notes")
}

// ==================== PLANS & SUBSCRIPTIONS ====================
model Plan {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.LongText
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  versions      PlanVersion[]
  subscriptions Subscription[]

  @@map("plans")
}

model PlanVersion {
  id     String @id @default(cuid())
  planId String
  plan   Plan   @relation(fields: [planId], references: [id])

  price           Decimal      @db.Decimal(10, 2)
  currency        Currency     @default(MXN)
  billingCycle    BillingCycle @default(MONTHLY)
  features        Json?
  effectiveAt     DateTime     @default(now())
  expiresAt       DateTime?
  isActive        Boolean      @default(true)
  daysTurnAround  Int          @default(3)
  aiGenerated     Boolean      @default(true)
  humanSupport    Boolean      @default(false)

  createdAt    DateTime       @default(now())
  subscription Subscription[]

  @@index([planId, isActive])
  @@map("plan_versions")
}

model Subscription {
  id            String        @id @default(cuid())
  projectId     String
  planId        String
  versionId     String
  startedAt     DateTime      @default(now())
  endedAt       DateTime?
  paymentMethod PaymentMethod @default(CREDIT_CARD)

  isActive Boolean @default(true)

  plan     Plan        @relation(fields: [planId], references: [id])
  version  PlanVersion @relation(fields: [versionId], references: [id])
  project  Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  invoices Invoice[]

  @@index([projectId])
  @@map("subscriptions")
}

model Invoice {
  id             String       @id @default(cuid())
  subscriptionId String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  amount   Decimal       @db.Decimal(10, 2)
  currency Currency      @default(MXN)
  status   BillingStatus @default(ACTIVE)
  issuedAt DateTime      @default(now())
  dueDate  DateTime?
  paidAt   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([subscriptionId])
  @@map("invoices")
}

// ==================== PROJECT SETUP SYSTEM ====================

model QuestionTemplate {
  id          String   @id @default(cuid())
  name        String
  section     ProjectSetupSection
  planType    QuestionPlanType // LANDING, WEBSITE, PRO, ALL
  order       Int
  isActive    Boolean  @default(true)
  version     Int      @default(1)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  questions   Question[]

  @@unique([section, planType, version])
  @@index([planType, isActive])
  @@map("question_templates")
}

// Individual questions within templates
model Question {
  id          String   @id @default(cuid())
  templateId  String
  template    QuestionTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  // Question content
  code        String   // 'target_audience', 'visual_style', etc. - for programmatic access
  question    String   // The actual question text
  helpText    String?  // Additional context
  placeholder String?  // Example answer

  // Question configuration
  type        QuestionType // TEXT, TEXTAREA, SELECT, MULTI_SELECT, etc.
  required    Boolean      @default(true)
  order       Int

  options     Json?    // Array of {value, label, image?}
  maxSelections Int?   // For MULTI_SELECT

  // Conditional display
  conditionalOn Json?  // {questionCode: 'must_have_features', hasValue: 'E-commerce'}

  // Validation rules
  validation  Json?    // {minLength: 10, maxLength: 500, pattern: 'regex'}

  isActive    Boolean  @default(true)

  // Relations
  answers     ProjectAnswer[]

  @@unique([templateId, code])
  @@index([templateId, order])
  @@map("questions")
}

// Answers provided by users for their projects
model ProjectAnswer {
  id          String   @id @default(cuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  questionId  String
  question    Question @relation(fields: [questionId], references: [id])

  answer      Json

  // Metadata
  answeredAt  DateTime @default(now())
  answeredBy  String?  // User ID who answered

  // For tracking changes
  version     Int      @default(1)
  isLatest    Boolean  @default(true)

  @@unique([projectId, questionId, version])
  @@index([projectId, isLatest])
  @@map("project_answers")
}

model ProjectSetupProgress {
  id          String   @id @default(cuid())
  projectId   String   @unique
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  currentSection ProjectSetupSection?

  sectionsCompleted Json    // ['business_context', 'project_goals']
  completionPercentage Int @default(0)

  aiPromptGenerated Boolean @default(false)
  aiPrompt         String? @db.LongText
  aiPromptVersion  Int     @default(0)

  lastSavedAt      DateTime @default(now())
  completedAt      DateTime?

  draftData        Json?    // Temporary storage for unsaved answers

  @@map("project_setup_progress")
}

// ==================== ENUMS ====================

enum ProjectPlanType {
  LANDING
  WEBSITE
  PRO
  ENTERPRISE
}

enum QuestionPlanType {
  LANDING
  WEBSITE
  PRO
  ENTERPRISE
  ALL // For questions that apply to all plans
}

enum ProjectSetupSection {
  BUSINESS_CONTEXT
  PROJECT_GOALS
  DESIGN_PREFERENCES
  CONTENT_STRUCTURE
  ADDITIONAL_CONTEXT
}

enum QuestionType {
  TEXT           // Single line text
  TEXTAREA       // Multi-line text
  SELECT         // Single choice dropdown
  MULTI_SELECT   // Multiple checkboxes
  IMAGE_SELECT   // Visual selection with images
  NUMBER         // Numeric input
  DATE           // Date picker
  URL            // URL input with validation
  EMAIL          // Email with validation
  TOGGLE         // Yes/No boolean
  RANGE          // Slider with min/max
  FILE_UPLOAD    // File attachment
}

// ==================== UPDATES TO EXISTING MODELS ====================

// ==================== ENUMS ====================
enum AuditAction {
  CREATE
  UPDATE
  DELETE
  VIEW
  STATUS_CHANGE
  ASSIGN
  UNASSIGN
}
enum UserRole {
  ADMIN
  PROJECT_MANAGER
  DESIGNER
  DEVELOPER
  SALES
  SUPPORT
  CUSTOMER
}
enum CustomerStatus {
  LEAD
  PROSPECT
  ACTIVE
  INACTIVE
  CHURNED
}
enum CompanySize {
  MICRO
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}
enum ProjectType {
  WEBSITE
  BRANDING
  CONSULTING
  DEVELOPMENT
  MARKETING
  OTHER
}
enum ProjectStatus {
  DRAFT
  PENDING_APPROVAL
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
  ARCHIVED
}
enum ProjectPhase {
  DISCOVERY
  PLANNING
  DESIGN
  DEVELOPMENT
  REVIEW
  TESTING
  LAUNCH
  POST_LAUNCH
  MAINTENANCE
}
enum PhaseStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  BLOCKED
  SKIPPED
}
enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
enum AddressType {
  BUSINESS
  BILLING
  SHIPPING
  OTHER
}
enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
enum SocialPlatform {
  FACEBOOK
  TWITTER
  INSTAGRAM
  LINKEDIN
  YOUTUBE
  TIKTOK
  WHATSAPP
  OTHER
}
enum DocumentType {
  CONTRACT
  PROPOSAL
  INVOICE
  LOGO
  BRAND_GUIDE
  DESIGN_FILE
  REPORT
  OTHER
}
enum NoteType {
  GENERAL
  MEETING
  PHONE_CALL
  EMAIL
  REQUIREMENT
  ISSUE
  RESOLUTION
  TASK
  FEEDBACK
  INTERNAL
}
enum Currency {
  USD
  MXN
  EUR
  CAD
}
enum BillingCycle {
  MONTHLY
  QUARTERLY
  YEARLY
}
enum BillingStatus {
  ACTIVE
  PAST_DUE
  CANCELLED
  COMPLETED
  REFUNDED
}
enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  PAYPAL
  CASH
  OTHER
}
