name: CI/CD - Automated Testing

on:
  push:
    branches: [ main, develop, 'feature/*', 'fix/*', 'hotfix/*' ]
  pull_request:
    branches: [ main, develop ]

env:
  # Force CI environment for tests
  CI: true
  NODE_ENV: test
  # Disable Nuxt telemetry in CI
  NUXT_TELEMETRY_DISABLED: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch full history for better blame information
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.4
          run_install: false

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Verify lockfile
        run: pnpm audit --audit-level moderate

      - name: Type check
        run: pnpm typecheck

      - name: Lint code
        run: pnpm lint

      - name: Run unit tests
        run: pnpm test

      - name: Run tests with coverage
        run: pnpm test:coverage

      - name: Upload coverage reports to Codecov
        if: success()
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage/
            !coverage/tmp/
          retention-days: 7

  # Quality Gates - ensure all checks pass
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "❌ Tests failed or were cancelled"
            exit 1
          else
            echo "✅ All tests passed successfully"
          fi

  # Build verification - ensure the project builds successfully
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: success()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.4
          run_install: false

      - name: Setup Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Build application
        run: pnpm build

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            .output/
            dist/
          retention-days: 3

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results to GitHub Security tab
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Summary job for PR status checks
  ci-success:
    name: CI Pipeline Success
    runs-on: ubuntu-latest
    needs: [quality-gate, build-verification]
    if: always()

    steps:
      - name: Check overall pipeline status
        run: |
          if [[ "${{ needs.quality-gate.result }}" == "success" && "${{ needs.build-verification.result }}" == "success" ]]; then
            echo "✅ CI Pipeline completed successfully"
            echo "All quality gates passed:"
            echo "  - Tests: ✅"
            echo "  - Build: ✅"
            echo "  - Type Check: ✅"
            echo "  - Lint: ✅"
          else
            echo "❌ CI Pipeline failed"
            echo "Quality gate: ${{ needs.quality-gate.result }}"
            echo "Build verification: ${{ needs.build-verification.result }}"
            exit 1
          fi